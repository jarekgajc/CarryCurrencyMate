@using Common.Models.Observations;
@inject HttpClient HttpClient;
@implements IDisposable;

<AccountCurrencyPicker />
<h1>Base currency: @AccountPreferenceState.Value.Currency</h1>

@if(_observation != null)
{
    <MudTable Items="@_observationTableData.Rows" Hover="true" Breakpoint="Breakpoint.Sm">
        <ColGroup>
            <col/>
            <col style="width: 80px;"/>
            <col style="width: 80px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh>Currency</MudTh>
            <MudTh>Buy</MudTh>
            <MudTh>Sell</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Currency">@context.Currency</MudTd>
            <MudTd DataLabel="Buy">@context.Buy</MudTd>
            <MudTd DataLabel="Sell">@context.Sell</MudTd>
        </RowTemplate>
    </MudTable>
}
else if(_showEditObserverTip)
{
    @if(_showObserverEditor)
    {
        <ObserverEditor Observer="ObserversState.Default" OnHide="ToggleObserverEditor" OnSave="ObserversState.SaveEditorState" />
    }
    else
    {
        <MudText>Exchange rates could not be loaded. <MudLink @onclick="ToggleObserverEditor">Check your credentials.</MudLink></MudText>
    }
}

@code {
    private Observation? _observation;
    private ObservationTableData _observationTableData = default!;
    private ObservationQuery _query = default!;
    private bool _showEditObserverTip;
    private bool _showObserverEditor;

    [CascadingParameter]
    public ObserversState ObserversState { get; set; } = default!;

    [CascadingParameter]
    public AccountPreferenceState AccountPreferenceState { get; set; } = default!;

    [CascadingParameter]
    private LoadRequest LoadRequest { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _query = new ObservationQuery
            {
                BaseCurrency = AccountPreferenceState.Value.Currency,
                Currencies = GetCurrencies(),
                Observer = ObserversState.Default!,
                TimeRange = TimeRange.DAY
            };

        await LoadObservation();
        AccountPreferenceState.Subscription.OnUpdate += OnUpdateAccountPreferenceState;
        //TODO: implement
        // ObserversState.Subscription.OnUpdate += OnUpdateObserversState;
    }

    public void Dispose()
    {
        AccountPreferenceState.Subscription.OnUpdate -= OnUpdateAccountPreferenceState;
        // ObserversState.Subscription.OnUpdate -= OnUpdateObserversState;
    }

    public async void OnUpdateAccountPreferenceState()
    {
        //TODO: update only on Currency change
        _query.BaseCurrency = AccountPreferenceState.Value.Currency;
        _query.Currencies = GetCurrencies();

        await LoadObservation();
    }

    public async void OnUpdateObserversState()
    {
        //TODO: update only on Currency change
        await LoadObservation();
    }

    public List<Currency> GetCurrencies()
    {
        var currencies = EnumUtils.GetList<Currency>();
        currencies.Remove(AccountPreferenceState.Value.Currency);
        return currencies;
    }

    public async Task LoadObservation()
    {
        HttpResponseMessage? response = await LoadRequest!(() => HttpClient.GetAsync($"/api/observations?q={Base64Utils.FromObject(_query)}"), OnFail);
        if (response != null)
        {
            _observation = await response.Content.ReadFromJsonAsync<Observation>();
            if(_observation != null)
            {
                _observationTableData = new ObservationTableData(_observation);
                StateHasChanged();
                return;
            }
        }
        _observation = null;
        _observationTableData = null;
        StateHasChanged();
    }

    public void OnFail(ApiError apiError)
    {
        if(apiError.Code == ApiErrorCode.ConnectionToSourceFailed)
        {
            _showEditObserverTip = true;
        }
    }

    public void ToggleObserverEditor()
    {
        _showObserverEditor = !_showObserverEditor;
        if(!_showObserverEditor)
        {
            _showEditObserverTip = false;
        }
    }
}
