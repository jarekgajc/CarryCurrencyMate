@using Common.Models.Exchanges
@inject RequestLoaderFactory RequestLoaderFactory;
@inject Navigator Navigator

@if (ExchangeRateValue != null)
{
    <MudCard>
        <MudTabs ActivePanelIndexChanged="OnChangeActivePanelIndex">
            <MudCardContent>
                <MudTabPanel Text="@string.Concat("Buy ", To)">
                    <ExchangeForm ExchangeType="ExchangeType.Buy" A="A" B="B" ExchangeRate="ExchangeRateValue.Buy" OnChangeValue="OnChangeFieldValue"/>
                </MudTabPanel>
                <MudTabPanel Text="@string.Concat("Sell ", To)">
                    <ExchangeForm ExchangeType="ExchangeType.Sell" A="B" B="A" ExchangeRate="ExchangeRateValue.Sell" OnChangeValue="OnChangeFieldValue" />
                </MudTabPanel>
            </MudCardContent>
        </MudTabs>
        <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Secondary" @onclick="Cancel">Cancel</MudButton>
            <MudSpacer />
            <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="Continue" Disabled="!IsValid()">Continue</MudButton>
        </MudCardActions>
    </MudCard>
}

@code {
    private Observation? _observation;
    private ObservationQuery _query = default!;
    private ExchangeType _exchangeType;

    [CascadingParameter]
    public ObserversState ObserversState { get; set; } = default!;

    [CascadingParameter]
    private RequestLoadController RequestLoadController { get; set; } = default!;

    [Parameter, EditorRequired]
    public Currency From { get; set; }
    [Parameter, EditorRequired]
    public Currency To { get; set; }

    public ExchangeForm.Field A { get; set; } = default!;
    public ExchangeForm.Field B { get; set; } = default!;
    public ExchangeRateValue? ExchangeRateValue { get; set; }

    protected override async Task OnInitializedAsync()
    {
        OnChangeActivePanelIndex();

        _query = new ObservationQuery
        {
            BaseCurrency = From,
            Currencies = new List<Currency> {To},
            Observer = ObserversState.Default!,
            TimeRange = TimeRange.CURRENT
        };

        _observation = await RequestLoaderFactory
            .CreateApiCaller($"api/observations?q={Base64Utils.FromObject(_query)}", RequestLoadController)
            .GetItems<Observation>();
        
        if (_observation != null)
        {
            ExchangeRateValue = _observation.ExchangeRates[0].Values[0];
        }
    }

    public bool IsValid()
    {
        return A.Value != null && B.Value != null;
    }

    private void Cancel()
    {
        Navigator.GoToObservation();
    }

    private void Continue()
    {
        //TODO: fix
        decimal? value = A.Value;
        if (value.HasValue)
        {
            Navigator.GoToExchangeConfirmation(CurrencyUtils.ToPair(From, To), value.Value, _exchangeType);
        }
    }

    private void OnChangeActivePanelIndex()
    {
        A = new ExchangeForm.Field(From);
        B = new ExchangeForm.Field(To);
    }

    private void OnChangeFieldValue(ExchangeType exchangeType)
    {
        _exchangeType = exchangeType;
    }

}
