@using Common.Models.Exchanges
@inject RequestLoaderFactory RequestLoaderFactory;
@inject ISnackbar Snackbar
@inject Navigator Navigator

@if (ExchangeRateValue != null)
{
    <MudCard>
        <MudCardContent>
            <MudSimpleTable Hover="true">
                <tbody>
                <tr>
                    <td>Pay</td>
                    <td>@_exchangeRequest.Value.Prettify() @_exchangeRequest.From</td>
                </tr>
                <tr>
                    <td>Get (approx.)</td>
                    <td>@Get.Prettify() @_exchangeRequest.To</td>
                </tr>
                </tbody>
            </MudSimpleTable>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Secondary" @onclick="Cancel">Cancel</MudButton>
            <MudSpacer/>
            <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="Confirm">Confirm</MudButton>
        </MudCardActions>
    </MudCard>
}

@code {
    private Observation? _observation;
    private ObservationQuery _query = default!;
    private ExchangeRequest _exchangeRequest = default!;

    [CascadingParameter]
    public ObserversState ObserversState { get; set; } = default!;

    [CascadingParameter]
    public ExchangersState ExchangersState { get; set; } = default!;

    [CascadingParameter]
    private RequestLoadController RequestLoadController { get; set; } = default!;

    [Parameter, EditorRequired]
    public Currency From { get; set; }
    [Parameter, EditorRequired]
    public Currency To { get; set; }
    [Parameter, EditorRequired]
    public decimal Value { get; set; }
    [Parameter, EditorRequired]
    public ExchangeType ExchangeType { get; set; }

    public decimal Get { get; set; } = default!;
    public ExchangeRateValue? ExchangeRateValue { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _query = new ObservationQuery
        {
            BaseCurrency = From,
            Currencies = new List<Currency> {To},
            Observer = ObserversState.Default!,
            TimeRange = TimeRange.CURRENT
        };

        _observation = await RequestLoaderFactory
            .CreateApiCaller($"api/observations?q={Base64Utils.FromObject(_query)}", RequestLoadController)
            .GetItems<Observation>();
        
        if (_observation != null)
        {
            ExchangeRateValue = _observation.ExchangeRates[0].Values[0];
            //TODO: test
            Get = ExchangeType == ExchangeType.Buy ? Value * ExchangeRateValue.Buy : _exchangeRequest.Value * (1 / ExchangeRateValue.Sell);

            _exchangeRequest = new ExchangeRequest()
            {
                Type = ExchangeType,
                From = From,
                To = To,
                Value = Value,
                Exchanger = ExchangersState.Default!,
                DryRun = true,
                Timestamp = ExchangeRateValue!.Time
            };
        }
    }

    private void Cancel()
    {
        Navigator.GoToExchange(CurrencyUtils.ToPair(From, To));
    }

    private async void Confirm()
    {
        //TODO: update path
        await RequestLoaderFactory
            .CreateApiCaller($"api/(maybe a proper request?!)", RequestLoadController)
            .CreateItem(_exchangeRequest);

        Snackbar.Add("Exchange has been completed", Severity.Success);
        Navigator.GoToObservation();
    }

}
