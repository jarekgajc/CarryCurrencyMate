@inject HttpClient HttpClient;

<MudCardHeader>
    <CardHeaderContent>
        <MudText Typo="Typo.h6">Observer</MudText>
    </CardHeaderContent>
</MudCardHeader>
<MudCardContent>
    <MudSelect T="string" Label="Coffee" AnchorOrigin="Origin.BottomCenter">
        @foreach (ObservationSource observationSource in Enum.GetValues(typeof(ObservationSource)))
        {
            <MudSelectItem Value="@(observationSource.ToString())" />
        }
    </MudSelect>
</MudCardContent>
<MudCardActions>
    <MudButton Variant="Variant.Text" Color="Color.Secondary" @onclick="Save">Cancel</MudButton>
    <MudSpacer/>
    <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="Cancel">Save</MudButton>
</MudCardActions>

@code {
    [Parameter] public Observer? Observer { get; set; }
    [Parameter] public Action Hide { get; set; }

    [CascadingParameter]
    private LoadRequest? LoadRequest { get; set; }

    private bool _exists;

    protected override void OnInitialized()
    {
        if (Observer == null)
        {
            Observer = new Observer();
        }
        else
        {
            _exists = true;
        }
    }

    public async void Save()
    {
        HttpResponseMessage? response = await LoadRequest!(() => 
        {
            return _exists ? HttpClient.PostAsJsonAsync($"/api/observers/{Observer.Id}", Observer) : HttpClient.PutAsJsonAsync($"/api/observers/{Observer.Id}", Observer);
        });
        if (response == null)
            return;

        // _observers = await response.Content.ReadFromJsonAsync<List<Observer>>();
        Hide();
    }

    public void Cancel()
    {
        Hide();
    }
}
