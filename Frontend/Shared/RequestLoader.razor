@using Frontend.Utils.ObjectsStates
@inject ISnackbar Snackbar

<MudElement HtmlTag="div" Style="position:relative;width:100%;height:100%">
    @if (WaitingRequests > 0)
    {
        <MudElement HtmlTag="div" Style="position:absolute;width:100%;height:100%;background-color:rgba(0.4, 0.4, 0.4, 0.4)">
            <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Row="true" Style="height:100%;">
                <MudProgressCircular Color="Color.Default" Indeterminate="true" />
            </MudStack>
        </MudElement>
    }
    <CascadingValue Value="LoadRequest">
        @ChildContent
    </CascadingValue>
</MudElement>


@code {
    public int WaitingRequests { get; set; }
    [Parameter, EditorRequired]
    public RenderFragment ChildContent { get; set; } = default!;
    public LoadRequest LoadRequest { get; set; } = default!;

    protected override void OnInitialized()
    {
        new ApiCallerHandler<>().HandleResponse()
        LoadRequest = async (load, onFail) =>
        {
            try
            {
                WaitingRequests++;
                StateHasChanged();
                // await Task.Delay(3000);
                HttpResponseMessage response = await load();
                switch (response.StatusCode)
                {
                    case HttpStatusCode.OK:
                        return response;
                    case HttpStatusCode.NoContent:
                        return null;
                    case HttpStatusCode.BadRequest:
                    {
                        var apiError = await response.Content.ReadFromJsonAsync<ApiError>();
                        if (apiError != null)
                        {
                            ShowError(apiError.Code.ToString());
                            onFail?.Invoke(apiError);
                            return null;
                        }
                        break;
                    }
                }
                ShowHttpStatusCodeError(response.StatusCode);
            } catch (HttpRequestException e)
            {
                if (e.StatusCode != null)
                {
                    ShowHttpStatusCodeError(e.StatusCode);
                } else
                {
                    ShowError("Something went wrong");
                }
            } finally
            {
                WaitingRequests--;
                StateHasChanged();
            }
            return null;
        };
    }

    public void ShowHttpStatusCodeError(HttpStatusCode? httpStatusCode)
    {
        if(httpStatusCode != null)
        {
            ShowError("Http request failed: " + httpStatusCode);
        }
        else
        {
            ShowError("Something went wrong");
        }
    }

    public void ShowError(string error)
    {
        Snackbar.Add(error, Severity.Error);
    }
}