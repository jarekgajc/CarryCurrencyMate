@    using Frontend.Utils.ObjectsStates
@inject ISnackbar Snackbar

<MudElement HtmlTag="div" Style="position:relative;width:100%;height:100%">
    @if (WaitingRequests > 0)
    {
        <MudElement HtmlTag="div" Style="position:absolute;width:100%;height:100%;background-color:rgba(0.4, 0.4, 0.4, 0.4)">
            <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Row="true" Style="height:100%;">
                <MudProgressCircular Color="Color.Default" Indeterminate="true" />
            </MudStack>
        </MudElement>
    }
    <CascadingValue Value="RequestLoadController">
        @ChildContent
    </CascadingValue>
</MudElement>


@code {
    public int WaitingRequests { get; set; }
    [Parameter, EditorRequired]
    public RenderFragment ChildContent { get; set; } = default!;
    public RequestLoadController RequestLoadController { get; set; } = default!;

    public void Enable()
    {
        WaitingRequests++;
        StateHasChanged();
    }

    public void Disable()
    {
        WaitingRequests--;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        // var enable = () =>
        // {
        //     WaitingRequests++;
        //     StateHasChanged();
        // };
        // var disable = () =>
        // {
        //     WaitingRequests++;
        //     StateHasChanged();
        // };
        RequestLoadController = new RequestLoadController
        {
            OnStart = Enable,
            OnComplete = response =>
            {
                Disable();
            },
            OnFail = error =>
            {
                Snackbar.Add(error.Message);
                Disable();
            }
        };
    }
}